// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: album_list_service/v1/album_list_service.proto

package album_list_servicev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bufbuild/buf-tour/gen/album_list_service/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AlbumListServiceName is the fully-qualified name of the AlbumListService service.
	AlbumListServiceName = "album_list_service.v1.AlbumListService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AlbumListServiceGetAlbumListProcedure is the fully-qualified name of the AlbumListService's
	// GetAlbumList RPC.
	AlbumListServiceGetAlbumListProcedure = "/album_list_service.v1.AlbumListService/GetAlbumList"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	albumListServiceServiceDescriptor            = v1.File_album_list_service_v1_album_list_service_proto.Services().ByName("AlbumListService")
	albumListServiceGetAlbumListMethodDescriptor = albumListServiceServiceDescriptor.Methods().ByName("GetAlbumList")
)

// AlbumListServiceClient is a client for the album_list_service.v1.AlbumListService service.
type AlbumListServiceClient interface {
	GetAlbumList(context.Context, *connect.Request[v1.GetAlbumListRequest]) (*connect.Response[v1.GetAlbumListResponse], error)
}

// NewAlbumListServiceClient constructs a client for the album_list_service.v1.AlbumListService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAlbumListServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AlbumListServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &albumListServiceClient{
		getAlbumList: connect.NewClient[v1.GetAlbumListRequest, v1.GetAlbumListResponse](
			httpClient,
			baseURL+AlbumListServiceGetAlbumListProcedure,
			connect.WithSchema(albumListServiceGetAlbumListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// albumListServiceClient implements AlbumListServiceClient.
type albumListServiceClient struct {
	getAlbumList *connect.Client[v1.GetAlbumListRequest, v1.GetAlbumListResponse]
}

// GetAlbumList calls album_list_service.v1.AlbumListService.GetAlbumList.
func (c *albumListServiceClient) GetAlbumList(ctx context.Context, req *connect.Request[v1.GetAlbumListRequest]) (*connect.Response[v1.GetAlbumListResponse], error) {
	return c.getAlbumList.CallUnary(ctx, req)
}

// AlbumListServiceHandler is an implementation of the album_list_service.v1.AlbumListService
// service.
type AlbumListServiceHandler interface {
	GetAlbumList(context.Context, *connect.Request[v1.GetAlbumListRequest]) (*connect.Response[v1.GetAlbumListResponse], error)
}

// NewAlbumListServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAlbumListServiceHandler(svc AlbumListServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	albumListServiceGetAlbumListHandler := connect.NewUnaryHandler(
		AlbumListServiceGetAlbumListProcedure,
		svc.GetAlbumList,
		connect.WithSchema(albumListServiceGetAlbumListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/album_list_service.v1.AlbumListService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AlbumListServiceGetAlbumListProcedure:
			albumListServiceGetAlbumListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAlbumListServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAlbumListServiceHandler struct{}

func (UnimplementedAlbumListServiceHandler) GetAlbumList(context.Context, *connect.Request[v1.GetAlbumListRequest]) (*connect.Response[v1.GetAlbumListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("album_list_service.v1.AlbumListService.GetAlbumList is not implemented"))
}
