// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: album_detail_service/v1/album_detail_service.proto

package album_detail_servicev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bufbuild/buf-tour/gen/album_detail_service/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AlbumDetailServiceName is the fully-qualified name of the AlbumDetailService service.
	AlbumDetailServiceName = "proto.album_detail_service.v1.AlbumDetailService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AlbumDetailServiceGetAlbumDetailProcedure is the fully-qualified name of the AlbumDetailService's
	// GetAlbumDetail RPC.
	AlbumDetailServiceGetAlbumDetailProcedure = "/proto.album_detail_service.v1.AlbumDetailService/GetAlbumDetail"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	albumDetailServiceServiceDescriptor              = v1.File_album_detail_service_v1_album_detail_service_proto.Services().ByName("AlbumDetailService")
	albumDetailServiceGetAlbumDetailMethodDescriptor = albumDetailServiceServiceDescriptor.Methods().ByName("GetAlbumDetail")
)

// AlbumDetailServiceClient is a client for the proto.album_detail_service.v1.AlbumDetailService
// service.
type AlbumDetailServiceClient interface {
	GetAlbumDetail(context.Context, *connect.Request[v1.GetAlbumDetailRequest]) (*connect.Response[v1.GetAlbumDetailResponse], error)
}

// NewAlbumDetailServiceClient constructs a client for the
// proto.album_detail_service.v1.AlbumDetailService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAlbumDetailServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AlbumDetailServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &albumDetailServiceClient{
		getAlbumDetail: connect.NewClient[v1.GetAlbumDetailRequest, v1.GetAlbumDetailResponse](
			httpClient,
			baseURL+AlbumDetailServiceGetAlbumDetailProcedure,
			connect.WithSchema(albumDetailServiceGetAlbumDetailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// albumDetailServiceClient implements AlbumDetailServiceClient.
type albumDetailServiceClient struct {
	getAlbumDetail *connect.Client[v1.GetAlbumDetailRequest, v1.GetAlbumDetailResponse]
}

// GetAlbumDetail calls proto.album_detail_service.v1.AlbumDetailService.GetAlbumDetail.
func (c *albumDetailServiceClient) GetAlbumDetail(ctx context.Context, req *connect.Request[v1.GetAlbumDetailRequest]) (*connect.Response[v1.GetAlbumDetailResponse], error) {
	return c.getAlbumDetail.CallUnary(ctx, req)
}

// AlbumDetailServiceHandler is an implementation of the
// proto.album_detail_service.v1.AlbumDetailService service.
type AlbumDetailServiceHandler interface {
	GetAlbumDetail(context.Context, *connect.Request[v1.GetAlbumDetailRequest]) (*connect.Response[v1.GetAlbumDetailResponse], error)
}

// NewAlbumDetailServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAlbumDetailServiceHandler(svc AlbumDetailServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	albumDetailServiceGetAlbumDetailHandler := connect.NewUnaryHandler(
		AlbumDetailServiceGetAlbumDetailProcedure,
		svc.GetAlbumDetail,
		connect.WithSchema(albumDetailServiceGetAlbumDetailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.album_detail_service.v1.AlbumDetailService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AlbumDetailServiceGetAlbumDetailProcedure:
			albumDetailServiceGetAlbumDetailHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAlbumDetailServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAlbumDetailServiceHandler struct{}

func (UnimplementedAlbumDetailServiceHandler) GetAlbumDetail(context.Context, *connect.Request[v1.GetAlbumDetailRequest]) (*connect.Response[v1.GetAlbumDetailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.album_detail_service.v1.AlbumDetailService.GetAlbumDetail is not implemented"))
}
